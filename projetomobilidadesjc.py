# -*- coding: utf-8 -*-
"""ProjetoMobilidadeSJC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12khiMfUWZvYvEdahzgmte94cV6rBTKCA

## Importing libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Lendo arquivo de entrada"""

# data = pd.read_excel('SerieTemporalDengue.xlsx', index_col=0, skiprows=[0]) 
data = pd.read_excel('Matriz3_Casos_Dengue_ZT.xlsx', index_col=0, skiprows=[0]) 

data = data.iloc[2:-1,2:-1]
#data = data.drop(data.columns[-1], axis=1) #removing column Total
data.fillna(0, inplace=True)
data = data.reset_index(drop=True)

column_names = []
for i in range(55):
  column_names.append('Z'+str(i+1))

data.columns = column_names
data.columns

data.head()

"""##Calculating Transpose Matrix"""

#transposeData = data.transpose() 
#transposeData.head()

#transposeData = transposeData.drop(transposeData.columns[0], axis=1) #removing column 0.0
#transposeData.shape

"""##Ploting charts"""

#dt = transposeData.astype(float)
dt = data.astype(float)
dt

corr = dt.corr(method='pearson')

plt.figure(figsize = (20,20))

ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=400),
    square=True
)
ax.set_xticklabels(
    ax.get_xticklabels(),
    rotation=45,
    horizontalalignment='right'
);
plt.title('Correlation Matrix', fontsize=16);
plt.savefig('correlationPearson.pdf')

#rowData = dt.loc[ 50 , : ]
#rowData
#columnsData = dt.loc[ : , 50 ]
#columnsData

export_csv = corr.to_csv('correlations.csv', index = True, header=True)
corr.columns
listas = corr.values.tolist()
lista0 = listas[0]

"""##Using our function to calculate correlation"""

def calcCorr(data, position, times):
  count_columns = data.shape[1]
  A = data.iloc[:,position]

  listOfCorrs=[]
  for i in range(0, count_columns):   
      B = data.iloc[:,i]
      count_begin=0
      count_row = data.shape[0]
      count_times = times
      corrs = []
      while count_times>0:
      #while count_row>=count_begin:
        AA = A.iloc[count_begin:] 
        BB = B.iloc[:count_row] 
        AA = AA.reset_index(drop=True)
        BB = BB.reset_index(drop=True)
        count_row = count_row - 1
        count_begin = count_begin +1
        merged = pd.merge_asof(AA, BB, left_index=True, right_index=True, direction='nearest')

        pearsoncorr = merged.corr(method='pearson')
        corrs.append(pearsoncorr.iloc[0,1])
        count_times = count_times - 1

        #print(corrs)
      listOfCorrs.append(corrs)
  return listOfCorrs



def calcCorrBetweenTwoColumns(data, column1, column2, times):
  count_columns = data.shape[1]
  A = data.iloc[:,column1]

  listOfCorrs=[]
  B = data.iloc[:,column2]
  count_begin=0
  count_row = data.shape[0]
  count_times = times
  corrs = []
  while count_times>0:
    AA = A.iloc[count_begin:] 
    BB = B.iloc[:count_row] 
    AA = AA.reset_index(drop=True)
    BB = BB.reset_index(drop=True)
    count_row = count_row - 1
    count_begin = count_begin +1
    merged = pd.merge_asof(AA, BB, left_index=True, right_index=True, direction='nearest')

    pearsoncorr = merged.corr(method='pearson')
    corrs.append(pearsoncorr.iloc[0,1])
    count_times = count_times - 1

  listOfCorrs.append(corrs)
  return listOfCorrs

def transformListInDataframeWithLabels(columnNumber, listOfCorrs, signals):
  labels = []
  resumeOfList = listOfCorrs[0]
  #columnName=transposeData.columns[column]
  
  for i in range(len(resumeOfList)):
    if(signals=="negative"):
      labels.append("k =-"+str(i))
    else:   
      labels.append("k ="+str(i))
  #label = ['k=0', 'k=1', 'k=2', 'k=3', 'k=4', 'k=5']
  listDataFrame = pd.DataFrame(resumeOfList, index=labels)
  listDataFrame.rename(columns = {0:columnNumber}, inplace=True)
 
 
  return listDataFrame

firstColumn = 5
secondColumn = 8


def getCorrsFromASpecificColumn(column, listOfCorrs, signals):
  labels = []
  resumeOfList = listOfCorrs[column]
  columnName=transposeData.columns[column]
  
  for i in range(len(resumeOfList)):
    if(signals=="negative"):
      labels.append("k =-"+str(i))
    else:   
      labels.append("k ="+str(i))
  #label = ['k=0', 'k=1', 'k=2', 'k=3', 'k=4', 'k=5']
  listDataFrame = pd.DataFrame(resumeOfList, index=labels)
  listDataFrame.rename(columns = {0:columnName}, inplace=True)
 
  return listDataFrame
  
times = 24

result = calcCorrBetweenTwoColumns(dt, 5, 8, times)
firstList = transformListInDataframeWithLabels(0, result, "positive")
firstList

result = transformListInDataframeWithLabels(8,calcCorrBetweenTwoColumns(dt, 5, 8, times), "positive")
result2 = transformListInDataframeWithLabels(5,calcCorrBetweenTwoColumns(dt, 8, 5, times), "negative")

result2.rename(index={0: str(secondColumn) +"->"+ str(firstColumn)})
result.rename(index={0: str(secondColumn) +"->"+ str(firstColumn)})

result2.columns = [str(firstColumn)+"-"+str(secondColumn)]

result.columns = [str(firstColumn)+"-"+str(secondColumn)]

result2 = result2[1:]
result2

frames = [result2[::-1], result]
frames
lista58 = pd.concat(frames)
lista58

correlations =  pd.DataFrame(columns=['X1','X2','corr'])

for x in range(dt.shape[1]):
  #listOfCorrsSecond = calcCorr(dt, x, 1)
    
 # for i in range(x+1, len(listOfCorrsSecond)):
   for i in range(x+1, dt.shape[1]):
    correlations = correlations.append({
     "X1": (x+1),
     "X2":  (i+1),
        "corr": calcCorrBetweenTwoColumns(dt, x, i, 1)[0][0]
      }, ignore_index=True)

correlations
export_csv = correlations.to_csv('correlationsX1X2Corr.csv', index = True, header=True)

dt.shape

dt.fillna(0, inplace=True)
majorCorrelations =  pd.DataFrame(columns=['X1','X2','corr', 'highest_corr','highest_k'])
times = 12
  
for xs in range(0, dt.shape[1]):
  firstColumn = xs
  for ys in range(firstColumn+1, dt.shape[1]):
    secondColumn = ys

    result = calcCorrBetweenTwoColumns(dt, firstColumn, secondColumn, times)

    firstList = transformListInDataframeWithLabels(0, result, "positive")
    firstList

    result = transformListInDataframeWithLabels(8,calcCorrBetweenTwoColumns(dt, firstColumn, secondColumn, times), "positive")
    result2 = transformListInDataframeWithLabels(5,calcCorrBetweenTwoColumns(dt, secondColumn, firstColumn, times), "negative")

    result2.rename(index={0: str(secondColumn+1) +"->"+ str(firstColumn+1)})
    result.rename(index={0: str(secondColumn+1) +"->"+ str(firstColumn+1)})

    result2.columns = [str(firstColumn+1)+"-"+str(secondColumn+1)]

    result.columns = [str(firstColumn+1)+"-"+str(secondColumn+1)]

    result2 = result2[1:]
    result2

    frames = [result2[::-1], result]
    frames
    lista = pd.concat(frames)


    max = lista[str(firstColumn+1)+"-"+str(secondColumn+1)].max()

    indexMax = lista.index[lista[str(firstColumn+1)+"-"+str(secondColumn+1)] == max].values

    majorCorrelations = majorCorrelations.append({
    "X1": firstColumn+1,
    "X2":  secondColumn+1,
       "corr": lista.loc['k =0'][0],
       "highest_corr": max,
       "highest_k": indexMax

    }, ignore_index=True)

majorCorrelations
export_csv = majorCorrelations.to_csv('maxCorrelations.csv', index = True, header=True)

lista58

def plotAndSaveChart(list):
  fig = list.plot.bar(stacked=True, rot=45, figsize=(15,5))
  figure = fig.get_figure()
  
  figure.savefig('ks'+str(firstColumn)+"-"+str(secondColumn)+'.png')

plotAndSaveChart(lista58)

